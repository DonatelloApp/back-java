name: Java CI/CD

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: maven

      - name: Clean with Maven
        run: mvn --batch-mode clean -f pom.xml
      
      - name: Compile with Maven
        run: mvn --batch-mode compile -f pom.xml

      - name: Test with Maven
        run: mvn --batch-mode test -f pom.xml

  build-and-push-to-docker:
    name: Build and Push to Docker
    needs: [test]
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          target: runner
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
  
  deploy-to-render:
    name: Deploy to render
    needs: [build-and-push-to-docker]
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Config environment variables
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }} 
        run: |
          curl -X PUT https://api.render.com/v1/services/$RENDER_SERVICE_ID/env-vars \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '
                [
                  {"key": "DATASOURCE_PROD_DONATELLO_RENDER", "value": "${{secrets.BD_DATASOURCE}}"},
                  {"key": "USER_PROD_DONATELLO_RENDER", "value": "${{ secrets.DB_USER }}"},
                  {"key": "PASSWORD_PROD_DONATELLO_RENDER", "value": "${{ secrets.DB_PASSWORD }}"}
                ]
              '
      - name: Request to deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
                "type":"manual",
                "clearCache": "clear"
              }'

      - name: Deploying
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          # Define the maximum time to wait (in seconds)
          MAX_WAIT_TIME=600
          POLL_INTERVAL=30

          start_time=$(date +%s)

          while true; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            if [ $elapsed_time -ge $MAX_WAIT_TIME ]; then
              echo "Timeout: Deploy did not complete in $MAX_WAIT_TIME seconds"
              exit 1
            fi

            response=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys)
            status=$(echo $response | jq -r '.[0].deploy.status')

            if [ "$status" == "live" ]; then
              echo "Deploy completed successfully"
              exit 0
            elif [ "$status" == "build_failed" ]; then
              echo "Deploy failed"
              exit 1
            else
              echo "Waiting for deploy to complete..."
              sleep $POLL_INTERVAL
            fi
          done